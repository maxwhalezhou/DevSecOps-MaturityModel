---
Implementation:
  Development and Source Control:
    Local development linting & style checks performed:
      risk: Insecure or unmaintenable code base.
      measure: >-
        Integrate static code analysis tools in IDEs.
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 2
      level: 4
      description: ""
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/stylecop
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/sonarqube
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017: []
      isImplemented: false
      evidence: ""
      comments: ""
    Pre-Commit checks and validations:
      risk: Using an insecure application might lead to a compromised application.
        This might lead to total data theft or data modification.
      measure: |
        Implement pre-commit checks to prevent secrets & other security issues being commit to source code.
      difficultyOfImplementation:
        knowledge: 4
        time: 4
        resources: 2
      usefulness: 4
      level: 2
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/pre-commit-microsoft
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/pre-commit-synopsis
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017: []
      isImplemented: false
      evidence: ""
      comments: ""
    API design validation:
      risk: Creation of insecure or non-compliant API.
      measure: |
        Design contract-first APIs using an interface description language such as OpenAPI, AsyncAPI or SOAP
        and validate the specification using specific tools.
        Checks should be integrated in IDEs and CI/CD pipelines.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 4
      level: 2
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/stoplight-spectral
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/api-oas-checker
      references:
        samm2:
        - V-ST-1-A
        iso27001-2017:
        - 8.25  # Secure development lifecycle
        - 8.27  # Secure system architecture and engineering principles
        - 8.28  # Secure coding
      isImplemented: false
      evidence: ""
      comments: ""
    Source Control Protection:
      risk: Intentional or accidental alterations in critical branches like master.
      measure: >-
        Define source code management system policies (e.g. branch protection rules,
        mandatory code reviews, ...)
        to ensure that changes to critical branches are only possible under defined conditions.
        These policies can be implemented at repository level or organization level,
        depending on the source code management system.
        Ensure that all commits are signed to verify that the author is genuine.
      difficultyOfImplementation:
        knowledge: 2
        time: 1
        resources: 2
      usefulness: 4
      level: 1
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/azuredevops
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/github-policies
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/signing-of-commits-protection
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - peer review - four eyes principle is not explicitly required by ISO 27001
        - 6.1.2
        - 14.2.1
      isImplemented: false
      evidence: ""
      comments: ""
    Versioning:
      risk: Deployment of untracked artifacts.
      measure: >-
        Version artifacts in order to identify deployed features and issues.
        This includes application and infrastructure code, jenkins configuration, container and virtual machine images.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 3
      usefulness: 5
      level: 1
      dependsOn:
      - Defined deployment process
      implementation: []
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.1.1
        - 12.1.2
        - 14.2.2
      isImplemented: false
      evidence: ""
      comments: ""
    MFA to SCM:
      risk: Unauthorized access to source code.
      measure: >-
        Enforce Multi-Factor authentication to source code management platforms.
        These policies can be implemented at repository level or organization level,
        depending on the source code management system.
      difficultyOfImplementation:
        knowledge: 2
        time: 1
        resources: 2
      usefulness: 4
      level: 1
      implementation:
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/yubikey
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/totp
      - $ref: src/assets/YAML/default/implementations.yaml#/implementations/smartcard
      references:
        samm2:
        - O-EM-1-A
        iso27001-2017:
        - 5.17    # Authentication information
        - 6.1.2   # Segregation of duties.
        - 14.2.1  # Secure development policies.
        d3f:
        - Multi-factorAuthentication
      isImplemented: false
      evidence: ""
      comments: ""
    Use of .gitignore:
      risk: Accidental commitment of sensitive, debug, or workstation specific data. 
      measure: >-
        Ensure that all git repos have a .gitignore in the root directory. 
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 2
      usefulness: 2
      level: 1
      implementation: []
      references:
        samm2: []
        iso27001-2017: []
      isImplemented: false
      evidence: ""
      comments: ""
    Use of User Roles for SCM:
      risk: Excessive permissions for SCM users may lead to unwanted source code modification and access. 
      measure: >-
        Create unique user and team roles so that access to source code can be tailored
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 2
      usefulness: 2
      level: 1
      implementation: []
      references:
        samm2: []
        iso27001-2017: []
      isImplemented: false
      evidence: ""
      comments: ""
    Enforcement of SSH protocol to access code repositories:
      risk: Risk of exposed credentials makes HTTPS a less-secure method for accessing code.
      measure: >-
        As an SCM admin, disable HTTP(S) access to Git respositories and require usage of SSH protocol.
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 2
      usefulness: 2
      level: 2
      description: >-
        Usage of HTTPS over SSH for accessing git repositories has its advantages. Both provide adequate protection against man-in-the-middle 
        (MiTM) attacks. However, an HTTPS connection is only as secure as the user password is unknown. In the case of credential breach, it less
        likely that the SSH keys have been exposed. As an organization's developer count grows, so does the risk of credential re-use and compromise.
      implementation: []
      references:
        samm2: []
        iso27001-2017: []
      isImplemented: false
      evidence: ""
      comments: ""
    Add GPG key to central SCM provider:
      risk: Compromised credentials leads to source code manipulation
      measure: >-
        This will guarantee that the person commiting changes to source really are who they say they are
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 2
      level: 2
      implementation: []
      references:
        samm2: []
        iso27001-2017: []
      isImplemented: false
      evidence: ""
      comments: ""
    Server Side Git Hooks:
      risk: >-
        Local security scanning and pre-commit checks are bypassed. Vulnerabilities may be identified later into the SDLC, costing more resources
        than necessary to remediate. 
      measure: >-
        Utilize a server side git hook like update or post-receive hook to run automatic scans, such as those for security and stylistic issues
      difficultyOfImplementation:
        knowledge: 2
        time: 3
        resources: 3
      usefulness: 3
      level: 3
      description: >-
        Developers may not know how to run security tooling locally, forget to do so, or bypass/mute local checks before committing code due to the noise. 
        As a defense-in-depth control, comments should be made at the PR level by scanning tooling for issues that go beyond the risk threshold (such as High
        /Critical vulnerabilities). Teams can get near real-time feedback on security issues. Catching security issues at this level prevents vulnerabilities
        from entering critical code branches and subsequently, production code. This control requires continuous tuning once implemented.
      implementation: []
      references:
        samm2: []
        iso27001-2017: []
      isImplemented: false
      evidence: ""
      comments: ""
...
